

input {
     tcp {
     port => "12401"
  }
}
filter {
  mutate {
    copy => {"[log][source][ip]" => "[host][ip]"}
    add_field => {
      "[event][module]" => "cisco"
      "[event][dataset]" => "cisco.router"
    }
    remove_field => [ "host" ]
  }

  mutate {
    strip => ["message"]
  }


  grok {
    tag_on_failure => "_parsefailure_header"
    match => { "message" => "(^(.*?)(<(?<pri>\d+)>)(\s)?(?<actual_msg>.*$))|(^(?<actual_msg>.*)$)" }
    timeout_millis => 500
  }
  syslog_pri {
    syslog_pri_field_name => "pri"
    remove_field => [ "pri" ]
  }

  mutate {
    copy => { "[log][source][hostname]" => "[tmp][log_source_hostname]"}
  }
  mutate {
    split => { "[tmp][log_source_hostname]" => "." }
  }

  mutate {
    id => "cisco-mutate-logoriginal1"
    add_field => {"[log][original]" => "%{[message]}"}
  }
  mutate {
    id => "cisco-mutate-logoriginal2"
    lowercase => ["[message]"]
  }

  dissect {
    id => "cisco.router-mutate-dissect-actual_msg"
    mapping => {
      "actual_msg" => "%{[[event][id]]}: %{[[tmp][device_timestamp]]->} %{+[[tmp][device_timestamp]]} %{+[[tmp][device_timestamp]]} %{[[source][address]]}: %%{[[tmp][facility]]}-%{[[tmp][severity]]}-%{[[tmp][mnemonic]]}: %{[[tmp][msg]]}"
    }
  }


  mutate {
    id => "cisco-mutate-gsub-date"
    gsub => [ "[tmp][ingest_timestamp]", "t", "-"]
  }

  date {
    id => "cisco-date-ingest"
    match => [ "[tmp][ingest_timestamp]",
      "MMM dd yyyy HH:mm:ss",
      "MMM  d yyyy HH:mm:ss",
      "ISO8601",
      "yyyy-MM-dd-HH:mm:ss.SSSZ",
      "MMM dd HH:mm:ss.SSS",
      "MMM dd HH:mm:ss.SSS ZZZ",
      "MMM dd HH:mm:ss ZZZ",
      "MMM dd HH:mm:ss.SSS",
      "YYYY MMM dd HH:mm:ss.SSS ZZZ",
      "YYYY MMM dd HH:mm:ss ZZZ",
      "YYYY MMM dd HH:mm:ss.SSS",
      "MMM dd HH:mm:ss.SSS ZZZ",
      "MMM dd HH:mm:ss.SSS",
      "MMM dd HH:mm:ss"
    ]
    target => "[event][ingested]"
    tag_on_failure => "_dateparsefailure_cisco.router-date-[event][ingested]"
  }

  date {
    id => "cisco.router-date-event.started"
    match =>[ "[tmp][device_timestamp]",
      "MMM dd yyyy HH:mm:ss",
      "MMM  d yyyy HH:mm:ss",
      "ISO8601",
      "yyyy-MM-dd-HH:mm:ss.SSSZ",
      "MMM dd HH:mm:ss.SSS",
      "MMM dd HH:mm:ss.SSS ZZZ",
      "MMM dd HH:mm:ss ZZZ",
      "MMM dd HH:mm:ss.SSS",
      "YYYY MMM dd HH:mm:ss.SSS ZZZ",
      "YYYY MMM dd HH:mm:ss ZZZ",
      "YYYY MMM dd HH:mm:ss.SSS",
      "MMM dd HH:mm:ss.SSS ZZZ",
      "MMM dd HH:mm:ss.SSS",
      "MMM dd HH:mm:ss"
    ]
    target => "[event][start]"
    tag_on_failure => "_dateparsefailure_cisco.router-date-event.started"
  }

  mutate {
    add_field => { "[event][action]" => "%{[[tmp][facility]]}.%{[[tmp][mnemonic]]}"}
  }

  mutate {
    uppercase => ["[tmp][facility]"]
  }
  translate {
    id => "cisco-translate-facility"
    field => "[tmp][facility]"
    destination => "[tmp][facility_translation]"
    dictionary_path => "${LOGSTASH_HOME}/config/cisco_ios_facility_categories.csv"  # ** Must set full "/path/to/lookup.json" to your lookup file **
    refresh_interval => 3000
    fallback => "not_found_facility"
  }

  translate {
    id => "cisco-translate-mnemonic"
    field => "[tmp][mnemonic]"
    destination => "[tmp][mnemonic_translation]"
    dictionary_path => "${LOGSTASH_HOME}/config/cisco_ios.json" # ** Must set full "/path/to/lookup.json" to your lookup file **
    refresh_interval => 3000
    fallback => '{"key1":"not_found"}'
  }

  if [tmp][mnemonic_translation] == '{"key1":"not_found"}' {
    json {
      source => "[tmp][mnemonic_translation]"
      target => "[tmp][mnemonic_translation]"
    }
    mutate {
      remove_field => ["[tmp][mnemonic_translation]"]
    }
    mutate {
      add_field => {
       "[tmp][mnemonic_translation][msg_explanation]" => "not_found_msg_explanation"
       "[tmp][mnemonic_translation][msg_recommendation]" => "not_found_msg_recommendation"
       "[tmp][mnemonic_translation][facility]" => "not_found_translation_facility"
       "[tmp][mnemonic_translation][msg_txt]" => "not_found_parsing_rule"
      }
    }
  }

  mutate {
    add_field => {
      "[event][reason]" => "%{[[tmp][mnemonic_translation][msg_explanation]]}"
      "[error][message]" => "%{[[tmp][msg]]}"
      "[event][recommendation]" => "%{[[tmp][mnemonic_translation][msg_recommendation]]}"
      "[tmp][msg_parse]" => "%{[[tmp][mnemonic_translation][msg_txt]]}"
    }
  }


}
output {
  stdout { codec => rubydebug }
}
